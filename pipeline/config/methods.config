import nextflow.util.SysHelper

set_output_dir {
    enabled = true
    def tz = TimeZone.getTimeZone("UTC")
    def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
    params.output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_name}"
    params.output_log_dir = "${params.output_dir}/log-${manifest.name}-${manifest.version}-${date}"
}

set_resources_allocation = {
    def node_cpus = SysHelper.getAvailCpus()
    def node_mem  = SysHelper.getAvailMemory().toString()
    if (node_cpus == 2 && (node_mem == '3 GB' || node_mem == '3.7 GB')) {
        includeConfig "${projectDir}/config/F2.config"
    } else if (node_cpus == 32 && node_mem == '62.8 GB' ) {
        includeConfig "${projectDir}/config/F32.config"
    } else if (node_cpus == 72 && (node_mem == '141.5 GB' || node_mem == '136.8 GB')) {
        includeConfig "${projectDir}/config/F72.config"
    } else if (node_cpus == 64 && node_mem == '950 GB') {
        includeConfig "${projectDir}/config/M64.config"
    } else {
        throw new Exception("ERROR: System resources not as expected, unable to assign resources. Detected cpus: ${node_cpus} and memory: ${node_mem}")
    }
}

set_process {
    executor = 'local'
    process.cache = params.cache_intermediate_pipeline_steps
}

set_pipeline_log = {
    trace.enabled = true
    trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"

    timeline.enabled = true
    timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"
        
    report.enabled = true
    report.file = "${params.log_output_dir}/nextflow-log/report.html"
}

setup = {
    methods.set_output_dir()
    methods.set_resources_allocation()
    methods.set_process()
    methods.set_pipeline_log()
}