import nextflow.util.SysHelper

methods {
    set_output_directory = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
        params.output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_name}"
        params.output_log_dir = "${params.output_dir}/log-${manifest.name}-${manifest.version}-${date}"
    }


    set_process = {
        process.cache = params.cache_intermediate_pipeline_steps
    }

    set_resources_allocation = {
        def node_cpus = SysHelper.getAvailCpus()
        def node_memory_GB = SysHelper.getAvailMemory().toGiga()
        // Load base.config by default for all pipelines
        includeConfig "${projectDir}/config/base.config"
        if (params.ucla_cds) {
            if (node_cpus == 64) {
                // Check memory for M64 node
                if (node_memory_GB == 64 && node_memory_GB >= 950 && node_memory_GB <= 1010) {
                    includeConfig "${projectDir}/config/M64.config"
                } else {
                    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            } else {
                // Check memory for F series node
                if (node_memory_GB >= (node_cpus * 2 * 0.9) && node_memory_GB <= (node_cpus * 2)) {
                    includeConfig "${projectDir}/config/F${node_cpus}.config"
                } else {
                    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            }
        }
    }

    set_pipeline_log = {
        trace.enabled = true
        trace.file = "${params.output_log_dir}/nextflow-log/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.output_log_dir}/nextflow-log/timeline.html"
            
        report.enabled = true
        report.file = "${params.output_log_dir}/nextflow-log/report.html"
    }

    setup = {
        methods.set_output_directory()
        methods.set_process()
        methods.set_resources_allocation()
        methods.set_pipeline_log()
    }
}