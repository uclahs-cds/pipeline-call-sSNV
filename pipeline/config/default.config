import nextflow.util.SysHelper

params {
    //algorithm running environment
    ucla_cds = true

    cache_intermediate_pipeline_steps = false
    
    //algorithm version
    mutect2_version = "Mutect2-4.2.2"
    strelka2_version = "Strelka2-2.9.10"
    somaticsniper_version = "SomaticSniper-1.0.5.0"
}

def node_cpus = SysHelper.getAvailCpus()
def node_mem  = SysHelper.getAvailMemory().toString()
def node_memory_GB = SysHelper.getAvailMemory().toGiga()

if (params.ucla_cds) {
            if (node_cpus == 64) {
                // Check memory for M64 node
                if (node_memory_GB == 64 && node_memory_GB >= 950 && node_memory_GB <= 1010) {
                    includeConfig "${projectDir}/config/M64.config"
                } else {
                    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            } else {
                // Check memory for F series node
                if (node_memory_GB >= (node_cpus * 2 * 0.9) && node_memory_GB <= (node_cpus * 2)) {
                    includeConfig "${projectDir}/config/F${node_cpus}.config"
                } else {
                    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            }
        }

docker {
    enabled = true
    uid_and_gid = "-u \$(id -u):\$(id -g)"
    all_group_ids = "\$(for i in `id --real --groups`; do echo -n \"--group-add=\$i \"; done)"
    runOptions = "${uid_and_gid} ${all_group_ids}"
}

process {
    executor = 'local'
}
