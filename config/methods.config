import nextflow.util.SysHelper

includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/schema/schema.config"

methods {
    set_output_directory = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)
        params.output_dir = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample_id}"
        params.output_log_dir = "${params.output_dir}/log-${manifest.name}-${manifest.version}-${date}"
    }


    set_process = {
        process.cache = params.cache_intermediate_pipeline_steps
    }

    // Function to ensure that resource requirements don't go beyond
    // a maximum limit
    check_max = { obj, type ->
        if (type == 'memory') {
            try {
                if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                    return params.max_memory as nextflow.util.MemoryUnit
                else
                    return obj
            } catch (all) {
                println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
                return obj
            }
        } else if (type == 'time') {
            try {
                if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                    return params.max_time as nextflow.util.Duration
                else
                    return obj
            } catch (all) {
                println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
                return obj
            }
        } else if (type == 'cpus') {
            try {
                return Math.min(obj, params.max_cpus as int)
            } catch (all) {
                println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
                return obj
            }
        }
    }

    set_resources_allocation = {
        def node_cpus = SysHelper.getAvailCpus()
        def node_memory_GB = SysHelper.getAvailMemory().toGiga()
        // Load base.config by default for all pipelines
        includeConfig "${projectDir}/config/base.config"
        if (params.ucla_cds) {
            if (node_cpus == 64) {
                // Check memory for M64 node
                if (node_memory_GB == 64 && node_memory_GB >= 950 && node_memory_GB <= 1010) {
                    includeConfig "${projectDir}/config/M64.config"
                } else {
                    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            } else {
                // Check memory for F series node
                if (node_memory_GB >= (node_cpus * 2 * 0.9) && node_memory_GB <= (node_cpus * 2)) {
                    includeConfig "${projectDir}/config/F${node_cpus}.config"
                } else {
                    throw new Exception("   ### ERROR ###   System resources not as expected (cpus=${node_cpus} memory=${node_memory_GB}), unable to assign resources.")
                }
            }
        }
    }

    set_pipeline_log = {
        trace.enabled = true
        trace.file = "${params.output_log_dir}/nextflow-log/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.output_log_dir}/nextflow-log/timeline.html"

        report.enabled = true
        report.file = "${params.output_log_dir}/nextflow-log/report.html"
    }

    set_env = {
        if (params.ucla_cds) {
            /**
             * By default, if the /scratch directory exists, set it as the Nextflow working directory
             * If config file specified work_dir, set it as the Nextflow working directory
             *
             * WARNING: changing this directory can lead to high server latency and
             * potential disk space limitations. Change with caution! The 'workDir'
             * in Nextflow determines the location of intermediate and temporary files.
             */
            params.work_dir = (params.containsKey("work_dir") && params.work_dir) ? params.work_dir : "/scratch"
            if (schema.check_workdir_permissions(params.work_dir)) {
                workDir = params.work_dir
            }
        } else {
            // If work_dir was specified as a param and exists or can be created, set workDir. Otherwise, let Nextflow's default behavior dictate workDir
            if (params.containsKey("work_dir") && params.work_dir && schema.check_workdir_permissions(params.work_dir)) {
                workDir = params.work_dir
            }
        }
    }

    set_sample_params = {
        params.multi_tumor_sample = false
        params.multi_normal_sample = false
        params.tumor_only_mode = false
        params.germline = false

        if (!params?.input?.BAM?.normal ) {
            params.tumor_only_mode = true
            params.input.BAM.normal = "${workDir}/NO_FILE.bam"
        } else {
            tumor = params.input.BAM.tumor
            normal = params.input.BAM.normal
            if ( tumor.size()  > 1) {
                params.multi_tumor_sample = true
             }
            if (normal.size() > 1) {
                params.multi_normal_sample = true
            }
        }

        if (params.containsKey('germline_resource_gnomad_vcf')) {
            params.germline = true
        }
        params.germline_resource_gnomad_vcf_index = "${params.germline_resource_gnomad_vcf}.tbi"
    }

    set_call_region_params = {
        if (params.containsKey("call_region") && params.call_region) {
            params.use_call_region = true
        } else {
            params.call_region = "${workDir}/NO_FILE.bed.gz"
            params.use_call_region = false
        }
        params.call_region_index = "${params.call_region}.tbi"
    }

    check_valid_algorithms = {
        Set valid_algorithms = ['somaticsniper', 'strelka2', 'mutect2']
        if (params.tumor_only_mode || params.multi_tumor_sample || params.multi_normal_sample ) {
            valid_algorithms = ['mutect2']
        }
        for (algo in params.algorithm) {
            if (!(algo in valid_algorithms)) {
                if (params.tumor_only_mode) {
                    throw new Exception("ERROR: params.algorithm ${params.algorithm} contains an invalid value. Tumor-only mode or multi-sample mode is only applied to Mutect2 algorithm.")
                    } else {
                        throw new Exception("ERROR: params.algorithm ${params.algorithm} contains an invalid value.")
                        }

            }
        }
        if (params.sample_id.isEmpty()) {
            throw new Exception("ERROR: Missing sample name.")
        }
    }

    setup = {
        schema.load_custom_types("${projectDir}/config/custom_schema_types.config")
        schema.validate()
        methods.set_output_directory()
        methods.set_process()
        methods.set_resources_allocation()
        methods.set_pipeline_log()
        methods.set_env()
        methods.set_sample_params()
        methods.set_call_region_params()
        methods.check_valid_algorithms()
    }
}
