/**
* This custom schema namespace implements a custom type for checking input FASTQs as a list of Maps.
*/
custom_schema_types {
    allowed_input_types = [
        'BAM','tumor', 'normal'
    ]

    /**
    * Check that input types are in allowed list
    */
    check_input_type_keys = { List given, String name, List choices=custom_schema_types.allowed_input_types ->
        for (elem in given) {
            if (!(elem in choices)) {
                throw new Exception("Invalid paramter ${name}. Valid types: ${choices}.")
            }
        }
    }

    /**
    * Check if given input is a Namespace
    */
    check_if_namespace = { val, String name ->
        if (!(val in Map)) {
            throw new Exception("${name} should be a Namespace, not ${val.getClass()}.")
        }
    }


    /**
    * Check that input is namespace of expected types
    */
    check_input_namespace = { Map options, String name, Map properties ->
        // Check parameters keys
        custom_schema_types.check_if_namespace(options[name], name)
        def given_keys = options[name].keySet() as ArrayList
        custom_schema_types.check_input_type_keys(given_keys, name)

        options[name].each { entry ->
            def entry_as_map = [:]
            entry_as_map[entry.key] = entry.value
            schema.validate_parameter(entry_as_map, entry.key, properties.elements[entry.key])
        }
    }

    /**
    * Check that input BAM are a list of expected paths
    */
    check_list_of_path = { Map options, String name, Map properties ->
        for (item in options[name]) {
            schema.check_path(item, 'r')
        }
    }

    types = [
        'InputNamespace': custom_schema_types.check_input_namespace,
        'ListPaths': custom_schema_types.check_list_of_path
    ]
}
